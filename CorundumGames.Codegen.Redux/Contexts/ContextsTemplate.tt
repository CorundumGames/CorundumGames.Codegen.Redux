<#@ template language="C#" visibility="internal" #>
<#@ import namespace="DesperateDevs.Utils" #>
<#@ import namespace="Entitas" #>

public partial class Contexts : Entitas.IContexts
{
<#
    foreach (var c in _contextNames)
    { #>
    public <#= c.UppercaseFirst().AddContextSuffix() #> <#= c.LowercaseFirst() #>
    {
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        get;

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private set;
    }

<#
    }
#>

    public Entitas.IContext[] allContexts => new Entitas.IContext[]
    {
<#
    foreach (var c in _contextNames)
    { #>
        <#= c.LowercaseFirst() #>,
<#
    } #>
    };

    public Contexts()
    {
    <#
    foreach (var c in _contextNames)
    { #>
    <#= c.LowercaseFirst() #> = new <#= c.AddContextSuffix() #>();
    <#
    } #>

        var postConstructors = System.Linq.Enumerable.Where(
            GetType().GetMethods(),
            method => System.Attribute.IsDefined(method, typeof(Entitas.CodeGeneration.Attributes.PostConstructorAttribute))
        );

        foreach (var postConstructor in postConstructors)
        {
            postConstructor.Invoke(this, null);
        }
    }

    public void Reset()
    {
<#
    foreach (var c in _contextNames)
    { #>
        <#= c.LowercaseFirst() #>?.Reset();
<#
    } #>
    }
}

<#+
    private readonly string[] _contextNames;

    internal ContextsTemplate(string[] contextNames)
    {
        _contextNames = contextNames ?? throw new ArgumentNullException(nameof(contextNames));
    }
#>
