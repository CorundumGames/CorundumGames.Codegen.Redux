<#@ template language="C#" visibility="internal" #>
<#@ import namespace="Entitas" #>

<#
    var entityName = _context.AddEntitySuffix();
#>

namespace CorundumGames.Behaviours
{
    using System;
    using CorundumGames.Data;
    using JetBrains.Annotations;
    using UnityEngine;
    using VContainer;

    [AddComponentMenu("Corundum Games/<#= _context #> Entity Injector")]
    internal sealed class <#= entityName #>Injector : MonoBehaviour
    {
#if ODIN_INSPECTOR
        [Sirenix.OdinInspector.Required]
#endif
        [SerializeField]
        private <#= entityName #>Definition[] definitions = Array.Empty<<#= entityName #>Definition>();

        [Inject, UsedImplicitly]
        private void Init(<#= _context.AddContextSuffix() #> context)
        {
            if (context == null)
            {
                throw new ArgumentNullException(nameof(context));
            }

            var scene = gameObject.scene;

            foreach (var d in definitions)
            { // For each entity we want to spawn...

                var entity = context.CreateEntity();

                if (entity is IComponentCloner cloner)
                {
                    for (var i = 0; i < d.Components.Count; ++i)
                    {
                        var component = d.Components[i];
                        var index = d.ComponentIndexes[i];

                        UnityEngine.Assertions.Assert.IsTrue(index >= 0,
                            $"{component.GetType()} (index {index}) cannot be cloned into a <#= entityName #>");

                        cloner.CloneComponent(index, component);
                    }
                }
            }
        }
    }
}

<#+
    private readonly string _context;

    internal EntityInjectorTemplate(string context)
    {
        _context = context ?? throw new ArgumentNullException(nameof(context));
    }
#>
