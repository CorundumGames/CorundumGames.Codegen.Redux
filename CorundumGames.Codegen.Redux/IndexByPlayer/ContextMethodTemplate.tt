<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Entitas" #>
<#@ import namespace="Entitas.CodeGeneration.Plugins" #>
<#@ import namespace="DesperateDevs.Utils" #>

public partial class Contexts
{
<#
    foreach (var component in _components)
    {
        foreach (var context in component.Contexts)
        {
            var componentName = component.Symbol.Name.ToComponentName(true);
#>
    public const string Player<#= componentName #> = "Player<#= componentName #>";
<#
        }

    }
#>

    [Entitas.CodeGeneration.Attributes.PostConstructorAttribute]
    public void InitializePlayerEntityIndices()
    {
<#
    foreach (var component in _components)
    {
        foreach (var context in component.Contexts)
        {
            var entityType = context.RemoveContextSuffix().AddEntitySuffix();
            var componentName = component.Symbol.Name.ToComponentName(true);
            var contextName = context.LowercaseFirst();
            var matcherName = context.RemoveContextSuffix().AddMatcherSuffix();
#>
        <#= contextName #>.AddEntityIndex(
            new Entitas.PrimaryEntityIndex<<#= entityType #>, CorundumGames.Chromavaders.Common.Player>(
                Player<#= componentName #>,
                <#= contextName #>.GetGroup(<#= matcherName #>.AllOf(<#= matcherName #>.Player, <#= matcherName #>.<#= componentName #>)),
                (e, c) => (c as PlayerComponent)?.player ?? e.player.player
            )
        );
<#
        }

    }
#>
    }
}

<#+
    private readonly Data[] _components;
    internal ContextMethodTemplate(Data[] components)
    {
        _components = components ?? throw new ArgumentNullException(nameof(components));

    }
#>
