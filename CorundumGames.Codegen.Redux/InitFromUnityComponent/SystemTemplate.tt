<#@ template language="C#" hostspecific="false" visibility="internal" #>
<#@ import namespace="Entitas" #>
<#@ import namespace="Entitas.CodeGeneration.Plugins" #>
<#@ import namespace="DesperateDevs.Utils" #>

<#
    var componentName = _componentData.Name.ToComponentName(true);
    var unityComponentName = _componentData.Member.type;
    var contextType = _contextName.AddContextSuffix();
    var entityType = _contextName.AddEntitySuffix();
    var matcherName = _contextName.AddMatcherSuffix();
    var contextMember = _contextName.LowercaseFirst();
    var className = $"{_contextName}Init{componentName}System";
#>

public sealed class <#= className #> : Entitas.ITearDownSystem
{
    private static readonly Entitas.GroupChanged<<#= entityType #>> _OnEntityAdded = OnEntityAdded;
    private readonly <#= contextType #> context;
    private readonly Entitas.IGroup<<#= entityType #>> entities;

    public <#= className #>(Contexts contexts)
    {
        if (contexts == null)
        {
            throw new System.ArgumentNullException(nameof(contexts));
        }

        context = contexts.<#= contextMember #>;
        entities = context.GetGroup(<#= matcherName #>.GameObject);

        entities.OnEntityAdded += _OnEntityAdded;
    }

    public void TearDown()
    {
        entities.OnEntityAdded -= _OnEntityAdded;
    }

    private static void OnEntityAdded(
        Entitas.IGroup<<#= entityType #>> group,
        <#= entityType #> entity,
        int index,
        Entitas.IComponent component
    )
    {
        var gameObject = entity.gameObject.gameObject;

        if (gameObject.TryGetComponent<<#= unityComponentName #>>(out var unityComponent))
        {
            entity.Add<#= componentName #>(unityComponent);
        }
    }


}
<#+
    private readonly string _contextName;
    private readonly Data _componentData;

    internal SystemTemplate(Data data, string contextName)
    {
        _contextName = contextName ?? throw new ArgumentNullException(nameof(contextName));
        _componentData = data ?? throw new ArgumentNullException(nameof(data));
    }
#>
