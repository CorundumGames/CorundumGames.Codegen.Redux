<#@ template language="C#" visibility="internal" #>
<#@ output extension=".cs" #>
<#@ import namespace="JCMG.EntitasRedux" #>

<#
    var contextName = _context.AddContextSuffix();
    var entityName = _context.AddEntitySuffix();
#>

public partial class <#= contextName #> : System.IDisposable
{
    private bool _disposed;
    private TNRD.Reflectives.ReflectiveField<System.Collections.Generic.Dictionary<string, JCMG.EntitasRedux.IEntityIndex>> _reflectiveIndexes;

    public void ActivateIndexes()
    {
        foreach (var i in EntityIndexes)
        {
            i?.Activate();
        }
    }

    public void DeactivateIndexes()
    {
        foreach (var i in EntityIndexes)
        {
            i?.Deactivate();
        }
    }

    public System.Collections.Generic.IReadOnlyCollection<JCMG.EntitasRedux.IEntityIndex> EntityIndexes
    {
        get
        {
            _reflectiveIndexes ??= new TNRD.Reflectives.ReflectiveField<System.Collections.Generic.Dictionary<string, JCMG.EntitasRedux.IEntityIndex>>(
                typeof(JCMG.EntitasRedux.Context<<#= entityName #>>),
                "_entityIndices",
                TNRD.Reflectives.ReflectiveClass.DEFAULT_FLAGS,
                this
            );

            return _reflectiveIndexes.GetValue().Values;
        }
    }

    public void Dispose()
    {
        if (!_disposed)
        {
            DeactivateIndexes();

            try
            {
                DestroyAllEntities();
            }
            catch (JCMG.EntitasRedux.ContextStillHasRetainedEntitiesException e)
            {
                UnityEngine.Debug.LogWarning(e);
            }

            ResetCreationIndex();
            RemoveAllEventHandlers();
            ClearComponentPools();

            _disposed = true;
        }
    }
}

<#+
    private readonly string _context;

    internal DisposableContextGeneratorTemplate(string context)
    {
        _context = context ?? throw new ArgumentNullException(nameof(context));
    }
#>
