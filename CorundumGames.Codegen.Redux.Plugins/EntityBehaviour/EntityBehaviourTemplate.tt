<#@ template language="C#" hostspecific="false" visibility="internal" #>
<#@ output extension=".cs" #>
<#@ import namespace="EntitasRedux.Core.Plugins" #>

<#
    var contextName = _context.GetContextName();
    var entityName = contextName.AddEntitySuffix();
#>
namespace CorundumGames
{
    using System;
    using System.Collections.Generic;
    using CorundumGames.Codegen.Redux.Runtime;
    using JCMG.EntitasRedux;
    using JetBrains.Annotations;
    using UnityEngine;
    using UnityEngine.Pool;
    using VContainer;

    [DisallowMultipleComponent]
    [AddComponentMenu("Corundum Games/Entitas Redux/<#= contextName #> Entity")]
    public sealed class <#= entityName #>Behaviour : MonoBehaviour
    {
        public <#= entityName #> Entity { get; private set; }

        [Inject, UsedImplicitly]
        internal void Init(<#= contextName.AddContextSuffix() #> context)
        {
            if (context == null)
            {
                throw new ArgumentNullException(nameof(context));
            }

            Entity = context.CreateEntity();
            Entity.Retain(this);

            if (Entity is IGameObjectEntity e)
            {
                e.AddGameObject(gameObject);

                gameObject.Link(Entity);
            }

            using (ListPool<I<#= contextName #>Blueprint>.Get(out var blueprints))
            {
                GetComponents(blueprints);
                foreach (var b in blueprints)
                {
                    b.ApplyToEntity(Entity);
                }
            }
        }

        private void OnDestroy()
        {
            Entity?.Release(this);
            if (TryGetComponent<EntityLink>(out var link) && link.Entity != null)
            {
                link.Unlink();
            }
        }
    }
}

<#+
    private readonly ContextData _context;

    internal EntityBehaviourTemplate(ContextData context)
    {
        _context = context ?? throw new ArgumentNullException(nameof(context));
    }
#>
